name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    # Use matrix to build on native runners for each platform because SQLite requires CGO,
    # which needs platform-specific C compilers. Native builds are simpler than cross-compiling.
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            targets: linux-amd64,linux-arm64
          - os: macos-latest
            targets: darwin-amd64,darwin-arm64
          - os: windows-latest
            targets: windows-amd64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install cross-compilation tools
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Get build info
        id: build_info
        shell: bash
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "release_name=$(date -u +%Y-%m-%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Linux binaries
        if: runner.os == 'Linux'
        env:
          COMMIT_HASH: ${{ steps.build_info.outputs.commit_hash }}
          BUILD_DATE: ${{ steps.build_info.outputs.build_date }}
        run: |
          mkdir -p dist/linux-amd64 dist/linux-arm64

          # Linux amd64
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 \
            CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
            CGO_LDFLAGS="-lm" \
            go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
            -o dist/linux-amd64/github-brain

          # Linux arm64
          GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc \
            CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
            CGO_LDFLAGS="-lm" \
            go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
            -o dist/linux-arm64/github-brain

      - name: Build macOS binaries
        if: runner.os == 'macOS'
        env:
          COMMIT_HASH: ${{ steps.build_info.outputs.commit_hash }}
          BUILD_DATE: ${{ steps.build_info.outputs.build_date }}
        run: |
          mkdir -p dist/darwin-amd64 dist/darwin-arm64

          # macOS amd64
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 \
            CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
            go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
            -o dist/darwin-amd64/github-brain

          # macOS arm64
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 \
            CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
            go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
            -o dist/darwin-arm64/github-brain

      - name: Build Windows binaries
        if: runner.os == 'Windows'
        env:
          COMMIT_HASH: ${{ steps.build_info.outputs.commit_hash }}
          BUILD_DATE: ${{ steps.build_info.outputs.build_date }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist/windows-amd64

          $env:CGO_ENABLED = "1"
          $env:CGO_CFLAGS = "-DSQLITE_ENABLE_FTS5"
          go build -ldflags "-X main.Version=$env:COMMIT_HASH -X main.BuildDate=$env:BUILD_DATE" -o dist/windows-amd64/github-brain.exe

      - name: Create Linux archives
        if: runner.os == 'Linux'
        run: |
          cd dist
          tar -czf github-brain-linux-amd64.tar.gz -C linux-amd64 github-brain
          tar -czf github-brain-linux-arm64.tar.gz -C linux-arm64 github-brain
          rm -rf linux-amd64 linux-arm64

      - name: Create macOS archives
        if: runner.os == 'macOS'
        run: |
          cd dist
          tar -czf github-brain-darwin-amd64.tar.gz -C darwin-amd64 github-brain
          tar -czf github-brain-darwin-arm64.tar.gz -C darwin-arm64 github-brain
          rm -rf darwin-amd64 darwin-arm64

      - name: Create Windows archive
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd dist
          Compress-Archive -Path windows-amd64/github-brain.exe -DestinationPath "github-brain-windows-amd64.zip"
          Remove-Item -Recurse -Force windows-amd64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: dist/*
          retention-days: 1

  release:
    name: Create Releases
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get build info
        id: build_info
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "release_name=$(date -u +%Y-%m-%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: binaries-*
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > SHA256SUMS.txt

      - name: Create Archived Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.build_info.outputs.release_name }}
          name: ${{ steps.build_info.outputs.release_name }}
          body: |
            Built from commit `${{ steps.build_info.outputs.commit_hash }}` on ${{ steps.build_info.outputs.build_date }}

            **Download:**
            - macOS (Intel): `github-brain-darwin-amd64.tar.gz`
            - macOS (Apple Silicon): `github-brain-darwin-arm64.tar.gz`
            - Linux (x86_64): `github-brain-linux-amd64.tar.gz`
            - Linux (ARM64): `github-brain-linux-arm64.tar.gz`
            - Windows: `github-brain-windows-amd64.zip`

            Verify with `SHA256SUMS.txt`
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/SHA256SUMS.txt
          draft: false
          prerelease: false

      - name: Delete old latest release
        continue-on-error: true
        run: |
          gh release delete latest --yes --cleanup-tag || true
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update Latest Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest
          body: |
            **Latest build:** `${{ steps.build_info.outputs.commit_hash }}` from ${{ steps.build_info.outputs.build_date }}

            This release always points to the most recent build. For archived releases, see [all releases](https://github.com/wham/github-brain/releases).

            **Install via NPM (recommended):**
            ```bash
            npm install -g @wham/github-brain
            ```

            **Manual download:**
            - macOS (Intel): `github-brain-darwin-amd64.tar.gz`
            - macOS (Apple Silicon): `github-brain-darwin-arm64.tar.gz`
            - Linux (x86_64): `github-brain-linux-amd64.tar.gz`
            - Linux (ARM64): `github-brain-linux-arm64.tar.gz`
            - Windows: `github-brain-windows-amd64.zip`
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/SHA256SUMS.txt
          draft: false
          prerelease: false
          make_latest: true

  publish-npm:
    name: Publish to NPM
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Get version from git
        id: version
        run: |
          VERSION="0.0.0-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: binaries-*

      - name: Prepare platform packages
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Extract binaries from archives and place in npm packages
          cd artifacts

          # macOS ARM64
          tar -xzf binaries-macOS/github-brain-darwin-arm64.tar.gz
          mkdir -p ../npm/darwin-arm64
          mv github-brain ../npm/darwin-arm64/

          # macOS x64
          tar -xzf binaries-macOS/github-brain-darwin-amd64.tar.gz
          mkdir -p ../npm/darwin-x64
          mv github-brain ../npm/darwin-x64/

          # Linux ARM64
          tar -xzf binaries-Linux/github-brain-linux-arm64.tar.gz
          mkdir -p ../npm/linux-arm64
          mv github-brain ../npm/linux-arm64/

          # Linux x64
          tar -xzf binaries-Linux/github-brain-linux-amd64.tar.gz
          mkdir -p ../npm/linux-x64
          mv github-brain ../npm/linux-x64/

          # Windows x64
          unzip binaries-Windows/github-brain-windows-amd64.zip
          mkdir -p ../npm/win32-x64
          mv github-brain.exe ../npm/win32-x64/

          cd ..

          # Update version in all package.json files
          for pkg in package.json npm/*/package.json; do
            sed -i "s/\"version\": \"0.0.0\"/\"version\": \"$VERSION\"/" "$pkg"
          done

      - name: Publish platform packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          for dir in npm/darwin-arm64 npm/darwin-x64 npm/linux-arm64 npm/linux-x64 npm/win32-x64; do
            cd "$dir"
            npm publish --provenance --access public
            cd ../..
          done

      - name: Publish main package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public

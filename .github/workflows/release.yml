name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    # Use matrix to build on native runners for each platform because SQLite requires CGO,
    # which needs platform-specific C compilers. Native builds are simpler than cross-compiling.
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            targets: linux-amd64,linux-arm64
          - os: macos-latest
            targets: darwin-amd64,darwin-arm64
          - os: windows-latest
            targets: windows-amd64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install cross-compilation tools
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Get build info
        id: build_info
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "release_name=$(date -u +%Y-%m-%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build binaries
        env:
          COMMIT_HASH: ${{ steps.build_info.outputs.commit_hash }}
          BUILD_DATE: ${{ steps.build_info.outputs.build_date }}
        run: |
          mkdir -p dist

          if [[ "${{ runner.os }}" == "Linux" ]]; then
            # Linux amd64
            GOOS=linux GOARCH=amd64 CGO_ENABLED=1 \
              CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
              CGO_LDFLAGS="-lm" \
              go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
              -o dist/github-brain-linux-amd64

            # Linux arm64
            GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc \
              CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
              CGO_LDFLAGS="-lm" \
              go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
              -o dist/github-brain-linux-arm64
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS amd64
            GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 \
              CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
              go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
              -o dist/github-brain-darwin-amd64

            # macOS arm64
            GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 \
              CGO_CFLAGS="-DSQLITE_ENABLE_FTS5" \
              go build -ldflags "-X main.Version=${COMMIT_HASH} -X main.BuildDate=${BUILD_DATE}" \
              -o dist/github-brain-darwin-arm64
          else
            # Windows amd64
            set CGO_ENABLED=1
            set CGO_CFLAGS=-DSQLITE_ENABLE_FTS5
            go build -ldflags "-X main.Version=%COMMIT_HASH% -X main.BuildDate=%BUILD_DATE%" -o dist/github-brain-windows-amd64.exe
          fi

      - name: Create archives
        env:
          COMMIT_HASH: ${{ steps.build_info.outputs.commit_hash }}
        run: |
          cd dist

          if [[ "${{ runner.os }}" == "Linux" ]]; then
            # Linux archives
            tar -czf github-brain-${COMMIT_HASH}-linux-amd64.tar.gz github-brain-linux-amd64
            tar -czf github-brain-${COMMIT_HASH}-linux-arm64.tar.gz github-brain-linux-arm64

            # Clean up binaries
            rm github-brain-linux-*
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS archives
            tar -czf github-brain-${COMMIT_HASH}-darwin-amd64.tar.gz github-brain-darwin-amd64
            tar -czf github-brain-${COMMIT_HASH}-darwin-arm64.tar.gz github-brain-darwin-arm64

            # Clean up binaries
            rm github-brain-darwin-*
          else
            # Windows archive
            Compress-Archive -Path github-brain-windows-amd64.exe -DestinationPath github-brain-%COMMIT_HASH%-windows-amd64.zip
            del github-brain-windows-amd64.exe
          fi

      - name: Generate checksums
        run: |
          cd dist
          if command -v sha256sum &> /dev/null; then
            sha256sum * > SHA256SUMS.txt 2>/dev/null || true
          else
            shasum -a 256 * > SHA256SUMS.txt 2>/dev/null || Get-FileHash -Algorithm SHA256 * | ForEach-Object { "$($_.Hash.ToLower())  $($_.Path | Split-Path -Leaf)" } | Out-File -Encoding ASCII SHA256SUMS.txt
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: dist/*

  release:
    name: Create Releases
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get build info
        id: build_info
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "release_name=$(date -u +%Y-%m-%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: binaries-*
          merge-multiple: true

      - name: Create Archived Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.build_info.outputs.release_name }}
          name: ${{ steps.build_info.outputs.release_name }}
          body: |
            Built from commit `${{ steps.build_info.outputs.commit_hash }}` on ${{ steps.build_info.outputs.build_date }}

            **Download:**
            - macOS (Intel): `github-brain-${{ steps.build_info.outputs.commit_hash }}-darwin-amd64.tar.gz`
            - macOS (Apple Silicon): `github-brain-${{ steps.build_info.outputs.commit_hash }}-darwin-arm64.tar.gz`
            - Linux (x86_64): `github-brain-${{ steps.build_info.outputs.commit_hash }}-linux-amd64.tar.gz`
            - Linux (ARM64): `github-brain-${{ steps.build_info.outputs.commit_hash }}-linux-arm64.tar.gz`
            - Windows: `github-brain-${{ steps.build_info.outputs.commit_hash }}-windows-amd64.zip`

            Verify with `SHA256SUMS.txt`
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/SHA256SUMS.txt
          draft: false
          prerelease: false

      - name: Update Latest Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest
          body: |
            **Latest build:** `${{ steps.build_info.outputs.commit_hash }}` from ${{ steps.build_info.outputs.build_date }}

            This release always points to the most recent build. For archived releases, see [all releases](https://github.com/wham/github-brain/releases).

            **Quick install:**
            ```bash
            # macOS Apple Silicon
            curl -L https://github.com/wham/github-brain/releases/latest/download/github-brain-${{ steps.build_info.outputs.commit_hash }}-darwin-arm64.tar.gz | tar xz

            # macOS Intel
            curl -L https://github.com/wham/github-brain/releases/latest/download/github-brain-${{ steps.build_info.outputs.commit_hash }}-darwin-amd64.tar.gz | tar xz

            # Linux x86_64
            curl -L https://github.com/wham/github-brain/releases/latest/download/github-brain-${{ steps.build_info.outputs.commit_hash }}-linux-amd64.tar.gz | tar xz

            # Windows (in PowerShell)
            Invoke-WebRequest https://github.com/wham/github-brain/releases/latest/download/github-brain-${{ steps.build_info.outputs.commit_hash }}-windows-amd64.zip -OutFile github-brain.zip
            ```
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/SHA256SUMS.txt
          draft: false
          prerelease: false
          make_latest: true
